"""
Moddy - Classe principale du bot
G√®re toute la logique centrale et les √©v√©nements
"""

import discord
from discord.ext import commands, tasks
import asyncio
import logging
from datetime import datetime, timezone
from typing import Optional, Set
import os
import sys
from pathlib import Path
import traceback

from config import (
    DEBUG,
    DEFAULT_PREFIX,
    DATABASE_URL,
    DEVELOPER_IDS
)
from database import setup_database, db

logger = logging.getLogger('moddy')


class ModdyBot(commands.Bot):
    """Classe principale de Moddy"""

    def __init__(self):
        # Intents n√©cessaires
        intents = discord.Intents.default()
        intents.message_content = True
        intents.guilds = True
        intents.members = True

        # Configuration du bot
        super().__init__(
            command_prefix=self.get_prefix,
            intents=intents,
            help_command=None,  # On fait notre propre commande help
            activity=discord.Activity(
                type=discord.ActivityType.watching,
                name="les serveurs | /help"
            ),
            status=discord.Status.online,
            case_insensitive=True
        )

        # Variables internes
        self.launch_time = datetime.now(timezone.utc)
        self.db = None  # Instance de ModdyDatabase
        self._dev_team_ids: Set[int] = set()
        self.maintenance_mode = False

        # Cache pour les pr√©fixes des serveurs
        self.prefix_cache = {}

        # Configure le gestionnaire d'erreurs global
        self.setup_error_handler()

    def setup_error_handler(self):
        """Configure le gestionnaire d'erreurs non captur√©es"""

        def handle_exception(loop, context):
            # R√©cup√®re l'exception
            exception = context.get('exception')
            if exception:
                logger.error(f"Erreur non captur√©e: {exception}", exc_info=exception)

                # Essaye d'envoyer √† Discord si le bot est connect√©
                if self.is_ready():
                    asyncio.create_task(self.log_fatal_error(exception, context))

        # Configure le handler
        asyncio.get_event_loop().set_exception_handler(handle_exception)

    async def log_fatal_error(self, exception: Exception, context: dict):
        """Log une erreur fatale dans Discord"""
        try:
            # Utilise le cog ErrorTracker s'il est charg√©
            error_cog = self.get_cog("ErrorTracker")
            if error_cog:
                error_code = error_cog.generate_error_code(exception)
                error_details = {
                    "type": type(exception).__name__,
                    "message": str(exception),
                    "file": "Erreur syst√®me",
                    "line": "N/A",
                    "context": str(context),
                    "traceback": traceback.format_exc()
                }
                error_cog.store_error(error_code, error_details)
                await error_cog.send_error_log(error_code, error_details, is_fatal=True)
        except Exception as e:
            logger.error(f"Impossible de logger l'erreur fatale: {e}")

    async def setup_hook(self):
        """Appel√© une fois au d√©marrage du bot"""
        logger.info("üîß Configuration initiale...")

        # Configure le gestionnaire d'erreurs pour les commandes slash
        self.tree.on_error = self.on_app_command_error

        # R√©cup√®re l'√©quipe de d√©veloppement
        await self.fetch_dev_team()

        # Connecte la base de donn√©es
        if DATABASE_URL:
            await self.setup_database()

        # Charge les extensions
        await self.load_extensions()

        # D√©marre les t√¢ches de fond
        self.status_update.start()

        # Synchronise les commandes slash
        if DEBUG:
            # En debug, sync seulement sur le serveur de test
            guild = discord.Object(id=1234567890)  # Remplace par ton serveur de test
            self.tree.copy_global_to(guild=guild)
            await self.tree.sync(guild=guild)
            logger.info("‚úÖ Commandes synchronis√©es (mode debug)")
        else:
            # En production, sync global
            await self.tree.sync()
            logger.info("‚úÖ Commandes synchronis√©es globalement")

    async def on_app_command_error(self, interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
        """Gestion des erreurs des commandes slash"""
        # Utilise le cog ErrorTracker s'il est charg√©
        error_cog = self.get_cog("ErrorTracker")
        if error_cog:
            # Cr√©e un faux contexte pour r√©utiliser le syst√®me existant
            class FakeContext:
                def __init__(self, interaction):
                    self.interaction = interaction
                    self.command = interaction.command
                    self.author = interaction.user
                    self.guild = interaction.guild
                    self.channel = interaction.channel
                    # Cr√©e un objet message factice
                    self.message = type('obj', (object,), {
                        'content': f"/{interaction.command.name} " + " ".join(
                            [f"{k}:{v}" for k, v in interaction.namespace.__dict__.items()])
                    })()

                async def send(self, *args, **kwargs):
                    if interaction.response.is_done():
                        return await interaction.followup.send(*args, **kwargs)
                    else:
                        return await interaction.response.send_message(*args, **kwargs)

            fake_ctx = FakeContext(interaction)

            # Utilise le gestionnaire existant
            await error_cog.on_command_error(fake_ctx, error)
        else:
            # Fallback si le syst√®me n'est pas charg√©
            logger.error(f"Erreur slash command: {error}", exc_info=error)

    async def fetch_dev_team(self):
        """R√©cup√®re l'√©quipe de d√©veloppement depuis Discord"""
        try:
            app_info = await self.application_info()

            if app_info.team:
                self._dev_team_ids = {member.id for member in app_info.team.members}
                logger.info(f"‚úÖ √âquipe de dev : {len(self._dev_team_ids)} membres")
            else:
                self._dev_team_ids = {app_info.owner.id}
                logger.info(f"‚úÖ Propri√©taire : {app_info.owner}")

            # Ajoute aussi les IDs depuis la config
            if DEVELOPER_IDS:
                self._dev_team_ids.update(DEVELOPER_IDS)

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de l'√©quipe : {e}")
            # Fallback sur les IDs dans config si disponibles
            if DEVELOPER_IDS:
                self._dev_team_ids = set(DEVELOPER_IDS)

    def is_developer(self, user_id: int) -> bool:
        """V√©rifie si un utilisateur est d√©veloppeur"""
        return user_id in self._dev_team_ids

    async def get_prefix(self, message: discord.Message):
        """R√©cup√®re le pr√©fixe pour un message"""
        # En MP, utilise le pr√©fixe par d√©faut
        if not message.guild:
            return [DEFAULT_PREFIX, f'<@{self.user.id}> ', f'<@!{self.user.id}> ']

        # V√©rifie le cache
        guild_id = message.guild.id
        if guild_id in self.prefix_cache:
            prefix = self.prefix_cache[guild_id]
        else:
            # R√©cup√®re depuis la BDD ou utilise le d√©faut
            prefix = await self.get_guild_prefix(guild_id) or DEFAULT_PREFIX
            self.prefix_cache[guild_id] = prefix

        # Retourne le pr√©fixe et les mentions
        return [prefix, f'<@{self.user.id}> ', f'<@!{self.user.id}> ']

    async def get_guild_prefix(self, guild_id: int) -> Optional[str]:
        """R√©cup√®re le pr√©fixe d'un serveur depuis la BDD"""
        if not self.db:
            return None

        try:
            guild_data = await self.db.get_guild(guild_id)
            return guild_data['data'].get('config', {}).get('prefix')
        except Exception as e:
            logger.error(f"Erreur BDD (prefix) : {e}")
            return None

    async def setup_database(self):
        """Initialise la connexion √† la base de donn√©es"""
        try:
            self.db = await setup_database(DATABASE_URL)
            logger.info("‚úÖ Base de donn√©es connect√©e (ModdyDatabase)")

            # Propri√©t√© pour la compatibilit√© avec l'ancien code
            self.db_pool = self.db.pool

        except Exception as e:
            logger.error(f"‚ùå Erreur connexion BDD : {e}")
            self.db = None
            self.db_pool = None

    async def load_extensions(self):
        """Charge tous les cogs et commandes staff"""
        # Charge d'abord le syst√®me d'erreurs
        try:
            await self.load_extension("cogs.error_handler")
            logger.info("‚úÖ Syst√®me d'erreurs charg√©")
        except Exception as e:
            logger.error(f"‚ùå CRITIQUE: Impossible de charger le syst√®me d'erreurs : {e}")

        # Charge le syst√®me de logging dev
        try:
            await self.load_extension("cogs.dev_logger")
            logger.info("‚úÖ Syst√®me de logging dev charg√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement logging dev : {e}")

        # Charge les cogs utilisateurs
        cogs_dir = Path("cogs")
        if cogs_dir.exists():
            for file in cogs_dir.glob("*.py"):
                if file.name.startswith("_") or file.name in ["error_handler.py", "dev_logger.py"]:
                    continue

                try:
                    await self.load_extension(f"cogs.{file.stem}")
                    logger.info(f"‚úÖ Cog charg√© : {file.stem}")
                except Exception as e:
                    logger.error(f"‚ùå Erreur cog {file.stem} : {e}")
                    # Log dans Discord si possible
                    if error_cog := self.get_cog("ErrorTracker"):
                        error_code = error_cog.generate_error_code(e)
                        error_details = {
                            "type": type(e).__name__,
                            "message": str(e),
                            "file": f"cogs/{file.name}",
                            "line": "N/A",
                            "traceback": traceback.format_exc()
                        }
                        error_cog.store_error(error_code, error_details)
                        await error_cog.send_error_log(error_code, error_details, is_fatal=False)

        # Charge les commandes staff
        staff_dir = Path("staff")
        if staff_dir.exists():
            for file in staff_dir.glob("*.py"):
                if file.name.startswith("_"):
                    continue

                try:
                    await self.load_extension(f"staff.{file.stem}")
                    logger.info(f"‚úÖ Staff charg√© : {file.stem}")
                except Exception as e:
                    logger.error(f"‚ùå Erreur staff {file.stem} : {e}")
                    # Log dans Discord si possible
                    if error_cog := self.get_cog("ErrorTracker"):
                        error_code = error_cog.generate_error_code(e)
                        error_details = {
                            "type": type(e).__name__,
                            "message": str(e),
                            "file": f"staff/{file.name}",
                            "line": "N/A",
                            "traceback": traceback.format_exc()
                        }
                        error_cog.store_error(error_code, error_details)
                        await error_cog.send_error_log(error_code, error_details, is_fatal=False)

    async def on_ready(self):
        """Appel√© quand le bot est pr√™t"""
        logger.info(f"‚úÖ {self.user} est connect√© !")
        logger.info(f"üìä {len(self.guilds)} serveurs | {len(self.users)} utilisateurs")
        logger.info(f"üèì Latence : {round(self.latency * 1000)}ms")

        # Met √† jour les attributs DEVELOPER maintenant que self.user est disponible
        if self.db and self._dev_team_ids:
            logger.info(f"üìù Mise √† jour automatique des attributs DEVELOPER...")
            for dev_id in self._dev_team_ids:
                try:
                    # R√©cup√®re ou cr√©e l'utilisateur
                    await self.db.get_user(dev_id)

                    # D√©finit l'attribut DEVELOPER
                    await self.db.set_attribute(
                        'user', dev_id, 'DEVELOPER', True,
                        self.user.id, "Auto-d√©tection au d√©marrage"
                    )
                    logger.info(f"‚úÖ Attribut DEVELOPER d√©fini pour {dev_id}")

                except Exception as e:
                    logger.error(f"‚ùå Erreur attribut DEVELOPER pour {dev_id}: {e}")

        # Stats de la BDD si connect√©e
        if self.db:
            try:
                stats = await self.db.get_stats()
                logger.info(f"üìä BDD: {stats['users']} users, {stats['guilds']} guilds, {stats['errors']} errors")
            except:
                pass

    async def on_guild_join(self, guild: discord.Guild):
        """Quand le bot rejoint un serveur"""
        logger.info(f"‚ûï Nouveau serveur : {guild.name} ({guild.id})")

        # Enregistre dans la BDD
        if self.db:
            try:
                # Cr√©e l'entr√©e du serveur
                await self.db.get_guild(guild.id)  # Cr√©e si n'existe pas

                # Cache les informations du serveur
                from database import UpdateSource
                guild_info = {
                    'name': guild.name,
                    'icon_url': str(guild.icon.url) if guild.icon else None,
                    'features': guild.features,
                    'member_count': guild.member_count,
                    'created_at': guild.created_at
                }
                await self.db.cache_guild_info(guild.id, guild_info, UpdateSource.BOT_JOIN)

            except Exception as e:
                logger.error(f"Erreur BDD (guild_join) : {e}")

    async def on_guild_remove(self, guild: discord.Guild):
        """Quand le bot quitte un serveur"""
        logger.info(f"‚ûñ Serveur quitt√© : {guild.name} ({guild.id})")

        # Nettoie le cache
        self.prefix_cache.pop(guild.id, None)

    async def on_message(self, message: discord.Message):
        """Traite chaque message"""
        # Ignore ses propres messages
        if message.author == self.user:
            return

        # Mode maintenance - seuls les devs peuvent utiliser le bot
        if self.maintenance_mode and not self.is_developer(message.author.id):
            return

        # V√©rifie si l'utilisateur est blacklist√©
        if self.db:
            try:
                if await self.db.get_attribute('user', message.author.id, 'BLACKLISTED'):
                    return  # Ignore silencieusement les messages des utilisateurs blacklist√©s
            except:
                pass

        # Traite les commandes
        await self.process_commands(message)

    async def on_command_error(self, ctx: commands.Context, error: commands.CommandError):
        """Gestion globale des erreurs"""
        # Le cog ErrorTracker s'occupe de tout maintenant
        # Cette m√©thode est gard√©e pour compatibilit√© mais d√©l√®gue au cog
        pass

    @tasks.loop(minutes=10)
    async def status_update(self):
        """Met √† jour le statut du bot"""
        # V√©rifications de s√©curit√©
        if not self.is_ready() or not self.ws:
            return

        statuses = [
            ("watching", f"{len(self.guilds)} serveurs"),
            ("playing", "/help"),
            ("watching", "les mod√©rateurs"),
            ("playing", f"avec {len(self.users)} utilisateurs")
        ]

        # Ajoute des statuts sp√©ciaux si connect√© √† la BDD
        if self.db:
            try:
                stats = await self.db.get_stats()
                if stats.get('beta_users', 0) > 0:
                    statuses.append(("playing", f"en beta avec {stats['beta_users']} testeurs"))
            except:
                pass

        # Choix al√©atoire
        import random
        activity_type, name = random.choice(statuses)

        activity = discord.Activity(
            type=getattr(discord.ActivityType, activity_type),
            name=name
        )

        try:
            await self.change_presence(activity=activity)
        except (AttributeError, ConnectionError):
            # Ignorer si on est en train de fermer
            pass
        except Exception as e:
            logger.error(f"Erreur changement de statut : {e}")

    @status_update.before_loop
    async def before_status_update(self):
        """Attendre que le bot soit pr√™t avant de d√©marrer la t√¢che"""
        await self.wait_until_ready()

    async def close(self):
        """Fermeture propre du bot"""
        logger.info("üîÑ Fermeture en cours...")

        # Arr√™te les t√¢ches AVANT de fermer
        if self.status_update.is_running():
            self.status_update.cancel()

        # Attendre un peu pour que les t√¢ches se terminent
        await asyncio.sleep(0.1)

        # Ferme la connexion BDD
        if self.db:
            await self.db.close()

        # Ferme proprement le client HTTP
        if hasattr(self, 'http') and self.http and hasattr(self.http, '_HTTPClient__session'):
            await self.http._HTTPClient__session.close()

        # Ferme le bot
        await super().close()