"""
Commande reboot pour d√©veloppeurs
Red√©marre le bot et modifie le message original
Utilise les composants V2
"""

import discord
from discord.ext import commands
import asyncio
import os
import sys
import subprocess
import json
import tempfile
from datetime import datetime

# Import du syst√®me d'embeds V2
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))
from utils.embeds import ModdyEmbed, ModdyResponse


class Reboot(commands.Cog):
    """Commande pour red√©marrer le bot"""

    def __init__(self, bot):
        self.bot = bot

    async def cog_check(self, ctx):
        """V√©rifie que l'utilisateur est d√©veloppeur"""
        return self.bot.is_developer(ctx.author.id)

    @commands.command(name="reboot", aliases=["restart", "reload"])
    async def reboot(self, ctx):
        """Red√©marre le bot automatiquement avec composants V2"""

        # Composants V2 initial
        components = [
            ModdyEmbed.heading("Red√©marrage en cours...", 2),
            ModdyEmbed.text("Le bot va red√©marrer dans quelques secondes."),
            ModdyEmbed.separator(),
            ModdyEmbed.text(f"_Demand√© par {ctx.author}_")
        ]

        # Envoyer le message
        msg = await ctx.send(**{
            "flags": ModdyEmbed.V2_FLAGS,
            "components": components
        })

        # Log l'action
        import logging
        logger = logging.getLogger('moddy')
        logger.info(f"üîÑ Reboot demand√© par {ctx.author} ({ctx.author.id})")

        # Sauvegarder les infos pour apr√®s le reboot
        reboot_info = {
            "channel_id": ctx.channel.id,
            "message_id": msg.id,
            "author_name": str(ctx.author),
            "author_avatar": str(ctx.author.display_avatar.url),
            "start_time": datetime.utcnow().isoformat()
        }

        # Fichier temporaire pour stocker les infos
        temp_file = os.path.join(tempfile.gettempdir(), "moddy_reboot.json")

        with open(temp_file, 'w') as f:
            json.dump(reboot_info, f)

        # Petit d√©lai pour s'assurer que le message est envoy√©
        await asyncio.sleep(0.5)

        # Pr√©parer les arguments pour le red√©marrage
        args = [sys.executable] + sys.argv

        # Sur Windows
        if sys.platform == "win32":
            subprocess.Popen(args)
            await self.bot.close()
            sys.exit(0)
        # Sur Linux/Mac
        else:
            await self.bot.close()
            os.execv(sys.executable, args)


class RebootNotifier(commands.Cog):
    """Met √† jour le message apr√®s le reboot"""

    def __init__(self, bot):
        self.bot = bot
        self._checked = False

    @commands.Cog.listener()
    async def on_ready(self):
        """V√©rifie et met √† jour le message de reboot"""
        # √âviter de v√©rifier plusieurs fois
        if self._checked:
            return
        self._checked = True

        temp_file = os.path.join(tempfile.gettempdir(), "moddy_reboot.json")

        if not os.path.exists(temp_file):
            return

        try:
            # Lire les infos
            with open(temp_file, 'r') as f:
                info = json.load(f)

            # Calculer le temps de reboot
            start_time = datetime.fromisoformat(info["start_time"])
            reboot_duration = (datetime.utcnow() - start_time).total_seconds()

            # R√©cup√©rer le canal et le message
            channel = self.bot.get_channel(info["channel_id"])
            if not channel:
                return

            try:
                message = await channel.fetch_message(info["message_id"])
            except:
                # Message introuvable
                os.remove(temp_file)
                return

            # Cr√©er les composants V2
            components = [
                ModdyEmbed.heading("Red√©marrage termin√© !", 2),
                ModdyEmbed.separator()
            ]

            # Description styl√©e
            if reboot_duration < 5:
                speed = "Ultra rapide"
            elif reboot_duration < 10:
                speed = "Rapide"
            elif reboot_duration < 20:
                speed = "Normal"
            else:
                speed = "Lent"

            components.extend([
                ModdyEmbed.text(f"**{speed}** - `{reboot_duration:.1f}` secondes"),
                ModdyEmbed.separator(),
                ModdyEmbed.code_block(
                    "‚úì Connexion Discord\n"
                    "‚úì Chargement des modules\n"
                    "‚úì Base de donn√©es\n"
                    "‚úì Commandes synchronis√©es",
                    ""
                ),
                ModdyEmbed.separator(),
                ModdyEmbed.heading("Statistiques", 3),
                ModdyEmbed.text(f"**Serveurs:** `{len(self.bot.guilds)}`"),
                ModdyEmbed.text(f"**Utilisateurs:** `{len(self.bot.users)}`"),
                ModdyEmbed.text(f"**Latence:** `{round(self.bot.latency * 1000)}ms`"),
                ModdyEmbed.separator(),
                ModdyEmbed.heading("Syst√®me", 3),
                ModdyEmbed.text(f"**Commandes:** `{len(self.bot.commands)}`"),
                ModdyEmbed.text(f"**Cogs:** `{len(self.bot.cogs)}`"),
                ModdyEmbed.text(f"**Version:** discord.py `{discord.__version__}`"),
                ModdyEmbed.separator(),
                ModdyEmbed.text(f"_Demand√© par {info['author_name']}_")
            ])

            # Mettre √† jour le message
            await message.edit(**{
                "flags": ModdyEmbed.V2_FLAGS,
                "components": components
            })

            # Supprimer le fichier temporaire
            os.remove(temp_file)

            # Log
            import logging
            logger = logging.getLogger('moddy')
            logger.info(f"‚úÖ Notification de reboot envoy√©e (dur√©e: {reboot_duration:.1f}s)")

        except Exception as e:
            import logging
            logger = logging.getLogger('moddy')
            logger.error(f"Erreur notification reboot: {e}")

            # Supprimer le fichier en cas d'erreur
            if os.path.exists(temp_file):
                os.remove(temp_file)


async def setup(bot):
    await bot.add_cog(Reboot(bot))
    await bot.add_cog(RebootNotifier(bot))