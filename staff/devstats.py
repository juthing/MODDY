"""
Commande pour voir les statistiques d'utilisation des commandes dev
"""

import discord
from discord.ext import commands
from datetime import datetime, timedelta
import sys
from pathlib import Path
from typing import Dict, List
from collections import Counter

sys.path.append(str(Path(__file__).parent.parent))
from utils.embeds import ModdyEmbed, ModdyResponse
from config import COLORS


class DevStats(commands.Cog):
    """Statistiques des commandes d√©veloppeur"""

    def __init__(self, bot):
        self.bot = bot

    async def cog_check(self, ctx):
        """V√©rifie que l'utilisateur est d√©veloppeur"""
        return self.bot.is_developer(ctx.author.id)

    @commands.command(name="devstats", aliases=["ds", "devs"])
    async def dev_stats(self, ctx):
        """Affiche les statistiques des commandes dev"""

        # R√©cup√®re le logger
        dev_logger = self.bot.get_cog("DevCommandLogger")
        if not dev_logger:
            await ctx.send("‚ùå Syst√®me de logging non charg√©")
            return

        # Embed principal
        embed = discord.Embed(
            title="üìä Statistiques des Commandes Dev",
            color=COLORS["primary"],
            timestamp=datetime.now()
        )

        # Top commandes utilis√©es
        if dev_logger.command_stats:
            sorted_commands = sorted(
                dev_logger.command_stats.items(),
                key=lambda x: x[1],
                reverse=True
            )[:10]

            commands_text = "\n".join([
                f"`{cmd}` : **{count}** utilisations"
                for cmd, count in sorted_commands
            ])

            embed.add_field(
                name="üèÜ Top Commandes",
                value=commands_text or "Aucune commande utilis√©e",
                inline=False
            )

            # Total d'utilisations
            total_uses = sum(dev_logger.command_stats.values())
            embed.add_field(
                name="üìà Total",
                value=f"**{total_uses}** commandes ex√©cut√©es",
                inline=True
            )

            # Commande la plus utilis√©e
            if sorted_commands:
                most_used = sorted_commands[0]
                embed.add_field(
                    name="üëë Plus utilis√©e",
                    value=f"`{most_used[0]}` ({most_used[1]} fois)",
                    inline=True
                )

        else:
            embed.description = "Aucune statistique disponible pour le moment."

        # Informations sur le syst√®me de logging
        embed.add_field(
            name="üìù Syst√®me de Logging",
            value=(
                f"**Canal :** <#{dev_logger.log_channel_id}>\n"
                f"**√âtat :** ‚úÖ Actif\n"
                f"**Module :** `{dev_logger.__class__.__name__}`"
            ),
            inline=False
        )

        await ctx.send(embed=embed)

    @commands.command(name="devlog", aliases=["dl"])
    async def manual_log(self, ctx, action: str, *, details: str = None):
        """Log manuel d'une action dev"""

        # R√©cup√®re le syst√®me de logging
        log_system = self.bot.get_cog("LoggingSystem")
        if not log_system:
            await ctx.send("‚ùå Syst√®me de logging non charg√©")
            return

        # Pr√©pare les d√©tails
        log_details = {}
        if details:
            log_details["D√©tails"] = details

        # Log l'action
        await log_system.log_command(ctx, action, log_details)

        # Confirmation
        embed = ModdyResponse.success(
            "Action logg√©e",
            f"L'action `{action}` a √©t√© enregistr√©e dans les logs dev."
        )
        await ctx.send(embed=embed)

    @commands.command(name="devalert", aliases=["alert", "critical"])
    async def dev_alert(self, ctx, *, message: str):
        """Envoie une alerte critique dans les logs"""

        # R√©cup√®re le syst√®me de logging
        log_system = self.bot.get_cog("LoggingSystem")
        if not log_system:
            await ctx.send("‚ùå Syst√®me de logging non charg√©")
            return

        # Envoie l'alerte
        await log_system.log_critical(
            title="Alerte Manuelle",
            description=f"{message}\n\n**Envoy√©e par :** {ctx.author.mention}",
            ping_dev=True
        )

        # Confirmation
        embed = discord.Embed(
            title="üö® Alerte envoy√©e",
            description="L'alerte a √©t√© envoy√©e dans le canal de logs avec un ping.",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)

    @commands.command(name="clearstats", aliases=["cs", "resetstats"])
    async def clear_stats(self, ctx):
        """R√©initialise les statistiques des commandes"""

        # R√©cup√®re le logger
        dev_logger = self.bot.get_cog("DevCommandLogger")
        if not dev_logger:
            await ctx.send("‚ùå Syst√®me de logging non charg√©")
            return

        # Sauvegarde pour confirmation
        old_count = sum(dev_logger.command_stats.values())

        # R√©initialise
        dev_logger.command_stats.clear()

        embed = ModdyResponse.success(
            "Statistiques r√©initialis√©es",
            f"`{old_count}` entr√©es ont √©t√© supprim√©es."
        )
        await ctx.send(embed=embed)

        # Log l'action
        if log_system := self.bot.get_cog("LoggingSystem"):
            await log_system.log_command(
                ctx,
                "clear_stats",
                {"Entr√©es supprim√©es": old_count}
            )


async def setup(bot):
    await bot.add_cog(DevStats(bot))