"""
Commande ping pour d√©veloppeurs
Affiche des informations d√©taill√©es sur le statut du bot
"""

import discord
from discord.ext import commands
import asyncio
import time
import platform
import psutil
from datetime import datetime, timezone
from typing import Optional

from config import COLORS, EMOJIS


class DevPing(commands.Cog):
    """Commandes de diagnostic pour d√©veloppeurs"""

    def __init__(self, bot):
        self.bot = bot

    async def cog_check(self, ctx):
        """V√©rifie que l'utilisateur est d√©veloppeur"""
        return self.bot.is_developer(ctx.author.id)

    @commands.command(name="ping", aliases=["p", "status", "diag"])
    async def ping_detailed(self, ctx):
        """Affiche le statut d√©taill√© du bot"""

        # Message de chargement
        embed_loading = discord.Embed(
            description=f"{EMOJIS['loading']} Diagnostic en cours...",
            color=COLORS["info"]
        )
        msg = await ctx.send(embed=embed_loading)

        # Mesure de la latence du message
        start_time = time.perf_counter()

        # Tests de latence
        api_latency = round(self.bot.latency * 1000, 2)

        # Latence du message
        end_time = time.perf_counter()
        message_latency = round((end_time - start_time) * 1000, 2)

        # Test de la base de donn√©es
        db_status = "‚ùå Non connect√©e"
        db_latency = "N/A"

        if self.bot.db_pool:
            try:
                db_start = time.perf_counter()
                async with self.bot.db_pool.acquire() as conn:
                    await conn.fetchval("SELECT 1")
                db_end = time.perf_counter()
                db_latency = f"{round((db_end - db_start) * 1000, 2)}ms"
                db_status = "‚úÖ Op√©rationnelle"
            except Exception as e:
                db_status = f"‚ùå Erreur : {type(e).__name__}"

        # Informations syst√®me
        process = psutil.Process()
        memory_usage = process.memory_info().rss / 1024 / 1024  # MB
        cpu_percent = process.cpu_percent(interval=0.1)

        # Uptime
        uptime = datetime.now(timezone.utc) - self.bot.launch_time
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        uptime_str = f"{hours}h {minutes}m {seconds}s"

        # Cr√©ation de l'embed principal
        embed = discord.Embed(
            title="üìä Diagnostic Syst√®me",
            color=COLORS["developer"],
            timestamp=datetime.now(timezone.utc)
        )

        # Statut g√©n√©ral avec emojis conditionnels
        api_emoji = "üü¢" if api_latency < 100 else "üü°" if api_latency < 200 else "üî¥"
        msg_emoji = "üü¢" if message_latency < 100 else "üü°" if message_latency < 200 else "üî¥"

        embed.add_field(
            name="üåê Discord API",
            value=f"{api_emoji} **Statut**: En ligne\n"
                  f"‚è±Ô∏è **Latence**: {api_latency}ms\n"
                  f"üîó **Gateway**: v{discord.__version__}",
            inline=True
        )

        embed.add_field(
            name="ü§ñ Bot",
            value=f"{msg_emoji} **Statut**: Op√©rationnel\n"
                  f"‚è±Ô∏è **R√©ponse**: {message_latency}ms\n"
                  f"‚è≥ **Uptime**: {uptime_str}",
            inline=True
        )

        embed.add_field(
            name="üóÑÔ∏è Base de donn√©es",
            value=f"**Statut**: {db_status}\n"
                  f"‚è±Ô∏è **Latence**: {db_latency}\n"
                  f"üíæ **Type**: PostgreSQL (Neon)",
            inline=True
        )

        # Deuxi√®me ligne
        embed.add_field(
            name="üìà Performance",
            value=f"üíª **CPU**: {cpu_percent}%\n"
                  f"üß† **RAM**: {memory_usage:.1f} MB\n"
                  f"‚öôÔ∏è **Threads**: {len(self.bot.guilds)} actifs",
            inline=True
        )

        embed.add_field(
            name="üìä Statistiques",
            value=f"üè¢ **Serveurs**: {len(self.bot.guilds)}\n"
                  f"üë• **Utilisateurs**: {len(self.bot.users)}\n"
                  f"üìù **Commandes**: {len(self.bot.commands)}",
            inline=True
        )

        embed.add_field(
            name="üñ•Ô∏è Syst√®me",
            value=f"**OS**: {platform.system()} {platform.release()}\n"
                  f"**Python**: {platform.python_version()}\n"
                  f"**Node**: {platform.node()}",
            inline=True
        )

        # Footer avec info d√©veloppeur
        embed.set_footer(
            text=f"Demand√© par {ctx.author}",
            icon_url=ctx.author.display_avatar.url
        )

        # Boutons d'action
        view = DiagnosticView(self.bot, ctx.author)

        await msg.edit(embed=embed, view=view)

    @commands.command(name="fastping", aliases=["fp"])
    async def fast_ping(self, ctx):
        """Ping rapide sans d√©tails"""
        start = time.perf_counter()
        msg = await ctx.send("üèì Pong!")
        end = time.perf_counter()

        await msg.edit(
            content=f"üèì Pong! | "
                    f"API: `{round(self.bot.latency * 1000)}ms` | "
                    f"Message: `{round((end - start) * 1000)}ms`"
        )


class DiagnosticView(discord.ui.View):
    """Vue avec boutons pour le diagnostic"""

    def __init__(self, bot, author):
        super().__init__(timeout=60)
        self.bot = bot
        self.author = author

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """V√©rifie que seul l'auteur peut utiliser les boutons"""
        if interaction.user != self.author:
            await interaction.response.send_message(
                "‚ùå Seul l'auteur de la commande peut utiliser ces boutons.",
                ephemeral=True
            )
            return False
        return True

    @discord.ui.button(label="Rafra√Æchir", style=discord.ButtonStyle.primary, emoji="üîÑ")
    async def refresh(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Rafra√Æchit les statistiques"""
        await interaction.response.send_message("‚ôªÔ∏è Rafra√Æchissement...", ephemeral=True)

        # Relance la commande
        ctx = await self.bot.get_context(interaction.message)
        ctx.author = self.author
        await self.bot.get_command("ping").invoke(ctx)

    @discord.ui.button(label="Collecter les d√©chets", style=discord.ButtonStyle.secondary, emoji="üóëÔ∏è")
    async def garbage_collect(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Force le garbage collector Python"""
        import gc
        collected = gc.collect()
        await interaction.response.send_message(
            f"üóëÔ∏è Garbage collector ex√©cut√© : {collected} objets lib√©r√©s",
            ephemeral=True
        )

    @discord.ui.button(label="Logs", style=discord.ButtonStyle.secondary, emoji="üìã")
    async def show_logs(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Affiche les derniers logs"""
        from config import LOG_FILE

        if LOG_FILE.exists():
            with open(LOG_FILE, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                last_logs = ''.join(lines[-10:])  # 10 derni√®res lignes

            await interaction.response.send_message(
                f"üìã **Derniers logs :**\n```\n{last_logs[-1900:]}\n```",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå Aucun fichier de log trouv√©",
                ephemeral=True
            )

    @discord.ui.button(label="Fermer", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ferme le diagnostic"""
        await interaction.response.defer()
        await interaction.delete_original_response()
        self.stop()


async def setup(bot):
    await bot.add_cog(DevPing(bot))